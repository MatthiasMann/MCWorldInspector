package mcworldinspector;

import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;
import java.util.function.Consumer;
import java.util.prefs.Preferences;
import java.util.stream.Stream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.event.DocumentEvent;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Segment;
import mcworldinspector.utils.DocumentChangedListener;
import mcworldinspector.utils.FileError;
import mcworldinspector.utils.JDialog;
import mcworldinspector.utils.MultipleErrorsDialog;

/**
 *
 * @author matthias
 */
public class CreateColorMapDialog extends JDialog {

    private final Preferences prefs = Preferences.userNodeForPackage(CreateColorMapDialog.class);
    private BlockColorMap bcm;
    private Consumer<BlockColorMap> colorMapListener;
    private Consumer<File> colorMapSavedListener;

    public CreateColorMapDialog(Component parent, boolean modal) {
        super(parent, modal);
        initComponents();

        tfMinecraftJAR.getDocument().addDocumentListener(new DocumentChangedListener() {
            @Override
            public void documentChanged(DocumentEvent e) {
                updateStatus();
            }
        });

        File home = FileSystemView.getFileSystemView().getHomeDirectory();
        if(home != null) {
            File mcJar = new File(home, ".minecraft/versions/1.14.4/1.14.4.jar");
            if(mcJar.exists())
                tfMinecraftJAR.setText(mcJar.getAbsolutePath());
        }
    }

    public void setColorMapListener(Consumer<BlockColorMap> colorMapListener) {
        this.colorMapListener = colorMapListener;
    }

    public void setColorMapSavedListener(Consumer<File> colorMapSavedListener) {
        this.colorMapSavedListener = colorMapSavedListener;
    }

    private void updateStatus() {
        boolean enabled = true;
        if(tfMinecraftJAR.getDocument().getLength() == 0) {
            lStatus.setText("Select Minecraft JAR file");
            enabled = false;
        } else if(bcm == null)
            lStatus.setText("Ready to generate block color map");
        else if(bcm.isEmpty())
            lStatus.setText("Could not locate any Minecraft block textures in specified files");
        else
            lStatus.setText("Generated colors for " + bcm.size() +
                    (bcm.size() == 1 ? " texture" : " textures"));
        btnGenerate.setEnabled(enabled);
        btnSaveAs.setEnabled(bcm != null && !bcm.isEmpty());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        tfMinecraftJAR = new javax.swing.JTextField();
        btnMinecraftJAR = new javax.swing.JButton();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        btnSelectMods = new javax.swing.JButton();
        btnAddMod = new javax.swing.JButton();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        taModList = new javax.swing.JTextArea();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        btnAddTexturePack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taTexturePackList = new javax.swing.JTextArea();
        btnGenerate = new javax.swing.JButton();
        btnSaveAs = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create block color map");
        setLocationByPlatform(true);

        jLabel1.setLabelFor(tfMinecraftJAR);
        jLabel1.setText("Minecraft JAR");

        btnMinecraftJAR.setText("...");
        btnMinecraftJAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinecraftJARActionPerformed(evt);
            }
        });

        jLabel2.setLabelFor(taModList);
        jLabel2.setText("Minecraft MODs");

        btnSelectMods.setText("Get mods from folder");
        btnSelectMods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectModsActionPerformed(evt);
            }
        });

        btnAddMod.setText("+");
        btnAddMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddModActionPerformed(evt);
            }
        });

        taModList.setColumns(20);
        taModList.setRows(10);
        jScrollPane2.setViewportView(taModList);

        jLabel3.setLabelFor(taTexturePackList);
        jLabel3.setText("Texture packs");

        btnAddTexturePack.setText("+");
        btnAddTexturePack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTexturePackActionPerformed(evt);
            }
        });

        taTexturePackList.setColumns(20);
        taTexturePackList.setRows(5);
        jScrollPane1.setViewportView(taTexturePackList);

        btnGenerate.setText("Generate");
        btnGenerate.setEnabled(false);
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        btnSaveAs.setText("Save As ...");
        btnSaveAs.setEnabled(false);
        btnSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 626, Short.MAX_VALUE)
                        .addComponent(btnSelectMods))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfMinecraftJAR)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddMod, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMinecraftJAR)
                    .addComponent(btnAddTexturePack, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane2)
                .addGap(12, 12, 12))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGenerate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSaveAs)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAddMod, btnAddTexturePack, btnMinecraftJAR});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfMinecraftJAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMinecraftJAR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnSelectMods)
                    .addComponent(btnAddMod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btnAddTexturePack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveAs)
                    .addComponent(btnGenerate)
                    .addComponent(btnCancel)
                    .addComponent(lStatus))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnMinecraftJARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinecraftJARActionPerformed
        File[] files = showFileSelector("recent_folder_minecraft_jar", false,
                false, JAR_EXTENSION_FILTER);
        if(files.length > 0)
            tfMinecraftJAR.setText(files[0].getAbsolutePath());
    }//GEN-LAST:event_btnMinecraftJARActionPerformed

    private void btnAddModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddModActionPerformed
        addFilesTo(taModList, showFileSelector("recent_folder_minecraft_mods",
                true, false, JAR_EXTENSION_FILTER));
        
    }//GEN-LAST:event_btnAddModActionPerformed

    private void btnSelectModsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectModsActionPerformed
        File[] folder = showFileSelector("recent_folder_minecraft_mods",
                false, true, null);
        if(folder.length > 0) {
            File[] files = folder[0].listFiles((dir,fileName) -> {
                int i = fileName.lastIndexOf('.');
                return i > 0 && i == fileName.length() - 4 && fileName
                        .substring(i+1).toLowerCase(Locale.ENGLISH).equals("jar");
            });
            Arrays.sort(files);
            addFilesTo(taModList, files);
        }
    }//GEN-LAST:event_btnSelectModsActionPerformed

    private void btnAddTexturePackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTexturePackActionPerformed
        addFilesTo(taTexturePackList, showFileSelector("recent_folder_texture_packs",
                true, false, ZIP_EXTENSION_FILTER));
    }//GEN-LAST:event_btnAddTexturePackActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        File mcJarFile = new File(tfMinecraftJAR.getText());
        if(!mcJarFile.canRead()) {
            JOptionPane.showMessageDialog(this, "Minecraft JAR file can't be read", getTitle(), JOptionPane.ERROR_MESSAGE);
            return;
        }
        Stream<File> files = Stream.concat(
                Stream.concat(Stream.of(mcJarFile), parseFiles(taModList)),
                parseFiles(taTexturePackList));
        ArrayList<FileError> errors = new ArrayList<>();
        try(BlockColorMapGenerator bcmg = new BlockColorMapGenerator(files, errors)) {
            bcm = bcmg.generateColorMap();
            updateStatus();
            if(colorMapListener != null && bcm != null && !bcm.isEmpty())
                colorMapListener.accept(bcm);
        }
        if(!errors.isEmpty())
            MultipleErrorsDialog.show(this,
                    "Errors while generating block color map", true, errors);
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void btnSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsActionPerformed
        JFileChooser jfc = new JFileChooser(prefs.get(RECENT_FOLDER_COLORMAP_KEY, "."));
        jfc.addChoosableFileFilter(BCM_EXTENSION_FILTER);
        jfc.setFileFilter(BCM_EXTENSION_FILTER);
        if(jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            prefs.put(RECENT_FOLDER_COLORMAP_KEY, jfc.getCurrentDirectory().getAbsolutePath());
            File file = ensureExtension(jfc.getSelectedFile(), BCM_EXTENSION);
            try {
                bcm.save(file);
                bcm = null;
                updateStatus();
                if(colorMapSavedListener != null)
                    colorMapSavedListener.accept(file);
            } catch (IOException ex) {
                MultipleErrorsDialog.show(this, "Errors while saving " + file,
                        true, new FileError(file, ex));
            }
        }
    }//GEN-LAST:event_btnSaveAsActionPerformed

    private static Stream<File> parseFiles(JTextArea ta) {
        return ta.getText().lines()
                .map(String::trim)
                .filter(s -> !s.isEmpty())
                .map(File::new);
    }

    private static String getExtension(String fileName) {
        int i = fileName.lastIndexOf('.');
        return (i > 0 && i < fileName.length() - 1) ?
                fileName.substring(i+1).toLowerCase(Locale.ENGLISH) : "";
    }

    private static File ensureExtension(File file, String extension) {
        final String fileName = file.getName();
        return getExtension(fileName).equals(extension) ? file
                : new File(file.getParentFile(), fileName + '.' + extension);
    }

    private static final FileNameExtensionFilter JAR_EXTENSION_FILTER = new FileNameExtensionFilter("JAR files", "jar");
    private static final FileNameExtensionFilter ZIP_EXTENSION_FILTER = new FileNameExtensionFilter("ZIP files", "zip");

    public static final String RECENT_FOLDER_COLORMAP_KEY = "recent_folder_colormap";

    public static final String BCM_EXTENSION = "bcm";
    public static final FileNameExtensionFilter BCM_EXTENSION_FILTER = new FileNameExtensionFilter("Block colormap files", BCM_EXTENSION);

    private File[] showFileSelector(String prefsKey, boolean multiSelection, boolean onlyFolders, FileFilter filter) {
        JFileChooser jfc = new JFileChooser(prefs.get(prefsKey, "."));
        jfc.setMultiSelectionEnabled(multiSelection);
        jfc.setFileSelectionMode(onlyFolders ? JFileChooser.DIRECTORIES_ONLY
                : JFileChooser.FILES_ONLY);
        if(filter != null) {
            jfc.addChoosableFileFilter(filter);
            jfc.setFileFilter(filter);
        }
        if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            prefs.put(prefsKey, jfc.getCurrentDirectory().getAbsolutePath());
            return multiSelection
                    ? jfc.getSelectedFiles()
                    : new File[] { jfc.getSelectedFile() };
        }
        return new File[0];
    }

    private static void addFilesTo(JTextArea ta, File[] files) {
        if(files.length == 0)
            return;
        try {
            Document document = ta.getDocument();
            int len = document.getLength();
            boolean needsNewLine = false;
            if(len > 0) {
                Segment s = new Segment();
                document.getText(len - 1, 1, s);
                needsNewLine = s.first() != '\n';
            }
            for(File file : files) {
                String str = file.getAbsolutePath();
                if(needsNewLine)
                    str = '\n' + str;
                document.insertString(len, str, null);
                len += str.length();
                needsNewLine = true;
            }
            ta.setCaretPosition(len);
        } catch(BadLocationException ex) {}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMod;
    private javax.swing.JButton btnAddTexturePack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnMinecraftJAR;
    private javax.swing.JButton btnSaveAs;
    private javax.swing.JButton btnSelectMods;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lStatus;
    private javax.swing.JTextArea taModList;
    private javax.swing.JTextArea taTexturePackList;
    private javax.swing.JTextField tfMinecraftJAR;
    // End of variables declaration//GEN-END:variables
}
