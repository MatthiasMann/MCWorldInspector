package mcworldinspector;

import java.util.function.Supplier;
import java.util.stream.Stream;
import mcworldinspector.nbt.NBTDoubleArray;
import mcworldinspector.nbt.NBTTagCompound;

/**
 *
 * @author matthias
 */
public class SimpleThingsPanel extends javax.swing.JPanel {
    private final Supplier<WorldRenderer> renderer;

    public SimpleThingsPanel(Supplier<WorldRenderer> renderer) {
        this.renderer = renderer;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSlimeChunks = new javax.swing.JButton();
        btnPlayerPos = new javax.swing.JButton();
        btnSpawnChunk = new javax.swing.JButton();

        btnSlimeChunks.setText("Highlight slime chunks");
        btnSlimeChunks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlimeChunksActionPerformed(evt);
            }
        });

        btnPlayerPos.setText("Highlight player position");
        btnPlayerPos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayerPosActionPerformed(evt);
            }
        });

        btnSpawnChunk.setText("Highlight spawn chunk");
        btnSpawnChunk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSpawnChunkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSlimeChunks, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(btnPlayerPos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSpawnChunk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSlimeChunks)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPlayerPos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSpawnChunk)
                .addContainerGap(201, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSlimeChunksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlimeChunksActionPerformed
        final WorldRenderer r = renderer.get();
        if(r != null)
            r.highlight(world -> {
                long seed = world.getRandomSeed();
                return world.chunks().filter(c -> c.isSlimeChunk(seed))
                        .map(chunk -> new WorldRenderer.HighlightEntry(chunk));
            });
    }//GEN-LAST:event_btnSlimeChunksActionPerformed

    private void btnPlayerPosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayerPosActionPerformed
        final WorldRenderer r = renderer.get();
        if(r != null)
            r.highlight(world -> {
                NBTDoubleArray pos = world.getLevel().getCompound("Data")
                    .getCompound("Player").get("Pos", NBTDoubleArray.class);
                if(pos != null) {
                    Chunk chunk = world.getChunk(pos);
                    if(chunk != null)
                        return Stream.of(new WorldRenderer.HighlightEntry(chunk));
                }
                return Stream.empty();
            });
    }//GEN-LAST:event_btnPlayerPosActionPerformed

    private void btnSpawnChunkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpawnChunkActionPerformed
        final WorldRenderer r = renderer.get();
        if(r != null)
            r.highlight(world -> {
                NBTTagCompound data = world.getLevel().getCompound("Data");
                Integer spawnX = data.get("SpawnX", Integer.class);
                Integer spawnZ = data.get("SpawnZ", Integer.class);
                if(spawnX != null && spawnZ != null) {
                    Chunk chunk = world.getChunk(spawnX >> 4, spawnZ >> 4);
                    if(chunk != null)
                        return Stream.of(new WorldRenderer.HighlightEntry(chunk));
                }
                return Stream.empty();
            });
    }//GEN-LAST:event_btnSpawnChunkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPlayerPos;
    private javax.swing.JButton btnSlimeChunks;
    private javax.swing.JButton btnSpawnChunk;
    // End of variables declaration//GEN-END:variables
}
